<pre class=metadata>
Title: Custom State Pseudo Class
Shortname: custom-state-pseudo-class
Level: 1
Status: CG-DRAFT
Group: WICG
ED: https://wicg.github.io/custom-state-pseudo-class/
Editor: Kent Tamura, Google https://www.google.com/, tkent@google.com
Editor: Rakina Zata Amni, Google https://www.google.com/, rakina@google.com
Editor: Domenic Denicola, Google https://www.google.com/, d@domenic.me, https://domenic.me/
Repository: https://github.com/WICG/custom-state-pseudo-class/
Abstract: This specification defines a way to expose custom element's internal
    states, and defines the <a>custom state pseudo class</a> '':--foo'' matching
    to a custom element exposing a state. This specification is intended to be
    merged to [[HTML]] and [[selectors-4]] in the future.
Markup Shorthands: markdown yes
Default Biblio Status: current
Complain About: accidental-2119 yes, missing-example-ids yes
</pre>

Introduction {#introduction}
============================

## Motivation ## {#motivation}

Build-in elements provided by user agents have certain “states” that can change
over time depending on user interaction and other factors, and are exposed to
web authors through pseudo classes. For example, some form controls have the
“invalid” state, which is exposed through the '':invalid'' [=pseudo-class=].

Like built-in elements, [=custom elements=] can have various states to be in too,
and [=custom element=] authors want to expose these states in a similar fashion
as the built-in elements.

## Solution ## {#solution}

This specification defines an API to inform [=custom element=]'s states to the
user agent, and a [=pseudo-class=] to select elements with specific states.
The former is the {{ElementInternals/states}} IDL attribute of
{{ElementInternals}}, and the latter is the <a>custom state pseudo class</a>.


<div class="example" id="ex-intro">

Assume that <code>LabeledCheckbox</code> doesn't expose its "checked" state
via a content attribute.

<!-- <xmp> doesn't work well with backqoutes.-->
<pre class="lang-html">
&lt;!DOCTYPE html>
&lt;body>
&lt;!-- Basic usage: -->
&lt;script>
class LabeledCheckbox extends HTMLElement {
  constructor() {
    super();
    this._internals = this.attachInternals();
    this.addEventListener('click', this._onClick.bind(this));

    const shadowRoot = this.attachShadow({mode: 'closed'});
    shadowRoot.innerHTML =
      &#96;&lt;style>
       :host::before {
         content: '[ ]';
         white-space: pre;
         font-family: monospace;
       }
       :host(:--checked)::before { content: '[x]' }
       &lt;/style>
       &lt;slot>Label&lt;/slot>&#96;;
  }

  get checked() { return this._internals.states.has('--checked'); }

  set checked(flag) {
    if (flag)
      this._internals.states.add('--checked');
    else
      this._internals.states.delete('--checked');
  }

  _onClick(event) {
    this.checked = !this.checked;
  }
}

customElements.define('labeled-checkbox', LabeledCheckbox);
&lt;/script>

&lt;style>
labeled-checkbox { border: dashed red; }
labeled-checkbox:--checked { border: solid; }
&lt;/style>

&lt;labeled-checkbox>You need to check this&lt;/labeled-checkbox>

<!-- Works even on ::part()s -->
&lt;script>
class QuestionBox extends HTMLElement {
  constructor() {
    super();
    const shadowRoot = this.attachShadow({mode: 'closed'});
    shadowRoot.innerHTML =
      &#96;&lt;div>&lt;slot>Question&lt;/slot>&lt;/div>
       &lt;labeled-checkbox part='checkbox'>Yes&lt;/labeled-checkbox>&#96;;
  }
}
customElements.define('question-box', QuestionBox);
&lt;/script>

&lt;style>
question-box::part(checkbox) { color: red; }
question-box::part(checkbox):--checked { color: green; }
&lt;/style>

&lt;question-box>Continue?&lt;/question-box>
&lt;/body>
</pre>
</div>


Exposing custom element states {#exposing}
============================

Each <a>autonomous custom element</a> has <dfn>states set</dfn>, a
[=/set=] of strings, and the the custom element is initially associated with
an empty [=/set=] of strings.

Issue(whatwg/html#5166): Support customized built-in elements.

<pre class=idl>
partial interface ElementInternals {
  readonly attribute CustomStateSet states;
};

[Exposed=Window]
interface CustomStateSet {
  setlike&lt;DOMString>;
  undefined add(DOMString value);
};
</pre>

The {{states}} IDL attribute returns the [=states set=] of this's
<a href="http://html.spec.whatwg.org/C/#internals-target">target element</a>.

The <dfn method for="CustomStateSet" lt="add(value)|add"><code>add(<var>value</var>)</code></dfn>
method, when invoked, must run these steps:

<ol>
 <li><p>If <var>value</var> does not match to <<dashed-ident>>, then
 <a>throw</a> a "{{SyntaxError!!exception}}" {{DOMException}}.</p></li>

 <li><p>Invoke <a href="https://heycam.github.io/webidl/#es-add-delete">the
 default <code>add</code> operation</a>, which the
 <code>setlike&lt;DOMString></code> would have if {{CustomStateSet}}
 interface had no {{CustomStateSet/add(value)}} operation, with
 <var>value</var> arguemnt.</p></li>
</ol>


<div class="example" id="ex-non-boolean-state">
[=States set=] can expose boolean states represented by
existence/non-existence of string values. If an author wants to expose a state
which can have three values, it can be converted to three exclusive boolean
states. For example, a state called <code>readyState</code> with
<code>"loading"</code>, <code>"interactive"</code>, and <code>"complete"</code>
values can be mapped to three exclusive boolean states, <code>"--loading"</code>,
<code>"--interactive"</code>, and <code>"--complete"</code>.

<pre class="lang-js">
// Change the readyState from anything to "complete".
this._readyState = "complete";
this._internals.<l>{{states}}</l>.delete("--loading");
this._internals.<l>{{states}}</l>.delete("--interactive");
this._internals.<l>{{states}}</l>.<l>{{CustomStateSet/add}}</l>("--complete");
</pre>

Issue(WICG/custom-state-pseudo-class#4): Support non-boolean states.
</div>

Selecting a custom element with a specific state {#selecting}
============================

The <dfn>custom state pseudo class</dfn> '':--foo'' is a [=pseudo-class=],
and applies while an element has a certain state. "State" is a per-element
information which can change over time depending on user interaction and other
extrinsic factors. The <a>custom state pseudo class</a> must start with '':'',
followed by one <<dashed-ident>>, otherwise the selector is invalid.
<!-- The above paragraph is independent from document languages. -->

The <a>custom state pseudo class</a> must match any element that is an
<a>autonomous custom element</a> and whose [=states set=]
<a for="list">contains</a> the specified <<dashed-ident>>.
<!-- The above paragraph depends on HTML as a document language. -->

<div class="example" id="ex-selector-logic">
A <a>custom state pseudo class</a> contains just one <<dashed-ident>>, and an
element can expose multiple states. Authors can use
<a>custom state pseudo class</a> with logical [=pseudo-classes=] like
''x-foo:is(:--state1, :--state2)'', ''x-foo:not(:--state2)'', and
''x-foo:--state1:--state2''.
</div>
